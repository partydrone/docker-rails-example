version: '3.4'

x-app: &default-app
  build:
    context: '.'
    target: 'app'
    args:
      - 'RAILS_ENV=${RAILS_ENV:-production}'
      - 'NODE_ENV=${NODE_ENV:-production}'
  depends_on:
    - 'postgres'
    - 'redis'
  env_file:
    - '.env'
  restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
  stop_grace_period: '3s'
  tty: true
  volumes:
    - '${DOCKER_WEB_VOLUME:-./public:/app/public}'

services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_POSTGRES_CPUS:-0}'
          memory: '${DOCKER_POSTGRES_MEMORY:-0}'
    env_file:
      - '.env'
    image: 'postgres:13.1'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    stop_grace_period: '3s'
    volumes:
      - 'postgres:/var/lib/postgresql/data'

  redis:
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_REDIS_CPUS:-0}'
          memory: '${DOCKER_REDIS_MEMORY:-0}'
    env_file:
      - '.env'
    image: 'redis:6.0.9-buster'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    stop_grace_period: '3s'
    volumes:
      - 'redis:/data'

  proxy:
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_PROXY_CPUS:-0}'
          memory: '${DOCKER_PROXY_MEMORY:-0}'
    env_file:
      - '.env'
    image: 'traefik:2.3'
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
      - '${DOCKER_CABLE_PORT:-127.0.0.1:28080}:28080'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    stop_grace_period: '3s'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './docker/proxy/traefik.yml:/etc/traefik/traefik.yml'
      - './docker/proxy/dynamic_config.yml:/etc/traefik/dynamic_config.yml'
      - './docker/proxy/certs/server.crt:/etc/ssl/server.crt'
      - './docker/proxy/certs/server.key:/etc/ssl/server.key'

  web:
    <<: *default-app
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WEB_CPUS:-0}'
          memory: '${DOCKER_WEB_MEMORY:-0}'
    healthcheck:
      test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}'
      interval: '60s'
      timeout: '3s'
      start_period: '5s'
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.web.entrypoints=http'
      # Always redirect to HTTPS:
      # - 'traefik.http.routers.web.middlewares=secureRedirect@file'
      - 'traefik.http.routers.web.rule=Host(`localhost`)'
      - 'traefik.http.routers.web-secure.entryPoints=https'
      - 'traefik.http.routers.web-secure.rule=Host(`localhost`)'
      - 'traefik.http.routers.app-secure.tls=true'

  worker:
    <<: *default-app
    command: 'sidekiq -C config/sidekiq.yml'
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WORKER_CPUS:-0}'
          memory: '${DOCKER_WORKER_MEMORY:-0}'

  cable:
    <<: *default-app
    command: 'puma -p 28080 cable/config.ru'
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_CABLE_CPUS:-0}'
          memory: '${DOCKER_CABLE_MEMORY:-0}'
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.cable.entryPoints=cable

volumes:
  postgres: {}
  redis: {}
